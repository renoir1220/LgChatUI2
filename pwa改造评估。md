# PWA 改造评估与实施计划（LgChatUI2项目）

## 🎯 核心诉求
让网站在手机上有近似App的体验，可以从主屏幕直接启动，全屏显示，有版本更新提示。

## ✅ 现有优势（无需改动的部分）
基于代码库分析，你的项目已经具备良好的PWA基础：
- **响应式设计完善**：TailwindCSS + 移动优先设计，已有良好的移动端适配
- **组件架构清晰**：Feature模块化架构，便于添加PWA相关功能
- **图标资源存在**：已有 favicon.png，可作为基础生成各尺寸图标
- **Vite构建系统**：对PWA插件支持优秀，配置简单
- **统一API管理**：所有API调用已经集中在 `api.ts`，便于处理

## 🔄 改动评估（需要修改的部分）
**好消息：改动量比预期小很多！** 主要是配置和元数据添加，核心业务代码几乎不需要改动。

## 目标与验收标准
- 安装就绪：Lighthouse PWA 安装检查通过；Chrome Android 可“安装应用”，iOS Safari 可“添加到主屏幕”。
- 独立显示：`display-mode: standalone` 下全屏、状态栏/主题色正确，安全区（刘海/圆角）无遮挡。
- 更新体验：发布新版本后，前端出现“有新版本可用，点击刷新”提示；刷新后加载新版本。

## 前端实施
1) Manifest
- 新增/完善 `public/manifest.webmanifest`：
  - `name`、`short_name`、`start_url: '/'`、`scope: '/'`、`display: 'standalone'`、`orientation: 'portrait'`
  - `theme_color`、`background_color`、`lang`、`dir`
  - `icons`: 包含 `512x512`、`192x192`，`purpose: 'any maskable'`
  - 可选：`shortcuts`、`screenshots`（提升安装体验）

2) 图标与资源
- 生成 maskable icons（至少 512 与 192），并保留常规 `any`；
- iOS：提供 `apple-touch-icon`（180x180 等常见规格）。

3) `index.html` 元信息
- `<link rel="manifest" href="/manifest.webmanifest">`
- `<meta name="theme-color" content="#...">`（可按浅/深色动态更新，属于可选增强）
- iOS 专项：`<meta name="apple-mobile-web-app-capable" content="yes">`、`<meta name="apple-mobile-web-app-status-bar-style" content="default|black-translucent">`、`<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">`

4) 显示与安全区适配
- CSS 使用 `env(safe-area-inset-*)` 处理刘海/底部手势区；
- 使用 `@media (display-mode: standalone)` 或 JS 检测隐藏浏览器专属 UI；
- 主题色与头部高度在深浅色主题下保持一致观感（可选）。

5) Service Worker（仅用于更新）
- 采用 `vite-plugin-pwa` 生成最小 SW：
  - `registerType: 'autoUpdate'`；
  - 关闭/不配置 `runtimeCaching`（不缓存接口与页面数据）。
- 在 `src/main.tsx` 使用 `workbox-window` 注册 SW，监听 `waiting` 事件并显示更新提示，调用 `skipWaiting()` + 页面刷新。
- TypeScript 与 ESLint：若用 TS 编写 SW，可新增 `tsconfig.sw.json` 并在 ESLint 启用 webworker 环境；遵循前端 TS 约束（类型仅用 `import type` 等）。

6) Vite 与结构
- 在 `frontend/vite.config.ts` 集成 `vite-plugin-pwa`；Manifest 可置于 `public/` 并在插件里引用；
- 不更改现有代理与构建顺序（依赖 `@lg/shared` 先构建）。

7) 可选增强
- 安装引导：在支持的环境捕获 `beforeinstallprompt`/`appinstalled`，做轻量提示与统计。
- 动态主题色：随 UI 主题设置 `<meta name=theme-color>`。

## 后端与部署
1) 资源提供路径
- 生产环境需从站点根路径 `/` 提供 `manifest.webmanifest` 与 `service-worker.js`（决定 SW 作用域）。
  - 当前 Nest 静态资源挂载在 `/static/`，需通过：
    - 反向代理/CDN 将上述两个文件映射到根路径，或
    - 在后端/部署脚本中将构建产物中 SW 与 Manifest 拷贝到根目录服务位置。

2) 响应头策略
- `service-worker.js`、`manifest.webmanifest`：`Cache-Control: no-cache`；
- 指纹静态资源（`*.js, *.css, *.woff2, *.png, ...`）：`public, max-age=31536000, immutable`；
- HTML：不缓存（`no-cache, no-store, must-revalidate`）。

3) HTTPS 与域
- 全站 HTTPS（安装前置条件）；
- 如前后端分域部署，确保前端静态域暴露根路径 SW/Manifest。

4) CDN/反代
- 在 Nginx/CDN 层配置根路径映射与缓存策略，确保 SW/Manifest 与指纹资源的缓存头符合上述要求。

## 测试与验证
1) 设备矩阵
- iOS Safari（iPhone/iPad，添加到主屏）
- Android Chrome（安装应用）
- 桌面 Chrome/Edge（安装应用）

2) 核心用例
- 安装流程：是否可安装/添加到主屏，图标与名称正确；
- 独立显示：全屏、状态栏样式、safe-area 布局正确；
- 更新流程：发布新版本后出现更新提示，确认后刷新加载新版本；
- 回退验证：SW 不应拦截/缓存接口与页面数据，网络行为不变。

3) 工具与检查
- Lighthouse：聚焦安装与显示项（忽略离线能力）；
- 开发者工具 Application 面板：Manifest、Service Workers、Display-mode 测试；
- 手动验证 `@media (display-mode: standalone)` 与安全区样式。

## 里程碑
- Phase A：安装基础
  - Manifest、图标（含 maskable 与 `apple-touch-icon`）、`index.html` 元信息、HTTPS 验证。
- Phase B：最小 SW 与更新
  - 集成 `vite-plugin-pwa`，注册 SW（`autoUpdate`）与更新提示组件；验证不会缓存数据。
- Phase C：平台打磨
  - iOS 安全区/状态栏样式、动态主题色、安装引导与统计（可选）。
- Phase D：QA 与发布
  - 设备联测、Lighthouse 校验、部署与响应头核对、文档与回滚说明。

## 变更面与风险
- 根路径提供 SW/Manifest 可能需要反代或后端静态资源策略的调整；
- iOS 与 Android 安装体验差异（iOS 无统一安装提示事件），需分别验证；
- SW 生命周期仅用于更新，需避免误配置 runtimeCaching 影响网络请求。

## 不做项（本阶段）
- 离线缓存、数据本地化（IndexedDB/Cache Storage）、弱网优化、后台同步、Web Push 通知。

---

如确认方案，我可以基于上述里程碑进一步拆解子任务，并提供每阶段预计工时与交付清单。

